Usage notes for C++ and IDL code in "cinema-stein_unpack" (formerly "stein_fsw_unpack")

(0) sub20_to_binary.py -- Python code to convert raw STEIN data to packed 
 binary format (if necessary).  Collect raw STEIN data via SUB20 interface; 
 data is collected as "log.log".  Use Python script "sub20_to_binary.py" 
 to convert "log.log" to a packed binary file of event-data "STEINBYTESLOG.log":
    python
    >> import sub20_to_binary as sub20
    >> bin = sub20.read_sub20_hexbytes("/.../some_path/.../log.log")
    >> sub20.write_sub20_hexbytes(data=bin, filename="/.../some_path/.../STEINBYTESLOG.log")


(1A) fsw_steinunpack.cpp -- C++ code to produce an ASCII event list from Brent's
 ASCII text dump of the FSW data.  Compiles with g++.  If compiled 
 binary has name "fsw_steinunpack", then usage on a UNIX machine is:

    ./fsw_steinunpack STEINBYTESLOG.log > STEINBYTESLOG.txt

 where "STEINBYTESLOG.log" is the name and path of the ASCII hex-bytes 
  text dump file, and "STEINBYTESLOG.txt" is the name and path of the
  output file, to which an ASCII event list will be written.


(1B) rawstein_extract.cpp -- C++ code to produce an ASCII event list from
 the raw binary bytes produced by STEIN.  Compiles with g++ and operates
 in the same manner as "fsw_steinunpack" (see above).

    ./rawstein_extract STEINBYTESLOG.log > STEINBYTESLOG.txt


(2) load_eventlist.pro -- IDL code that reads in the ASCII event list
 generated by the "fsw_steinunpack.cpp" binary (e.g. "STEINBYTESLOG.txt")


(3) fsw_steinunpack.pro -- IDL code that duplicates the functionality of 
 "fsw_steinunpack.cpp" and "load_eventlist.pro", but instead directly 
 returning an unlabeled event list as a data array within IDL.


(4) stein_actions.pro -- "convenience code", to assist with common tasks:

    (function) GET_SUBSET: searches data array for records with  
        "EV_CODE", "ADD", and "DET_ID" that match specified values, 
        and returns a Boolean array, whose indices are easily extracted
        with IDL's "WHERE" function.

    (function) HISTOGRAM_DATA: wrapper for IDL's "HISTOGRAM" function.

    (procedure) PLOT_HISTOGRAM: convenience procedure that allows user to 
        specify desired values of EV_CODE, ADD, and DET_ID, and easily
        generate a histogram plot via IDL's "OPLOT" procedure (NOTE: 
        requires an existing plot window).

    (function) LOG_UNPACK: mapping of raw telemetered EV_CODE=0 "data" 
        values (actually log-binned) to keV energy space.


(5,6,7) support routines, called by fsw_steinunpack.pro.  NOTE: SEE RESPECTIVE 
    FILES FOR AUTHOR INFORMATION.

    (function) DATATYPE
    (function) HEX2DEC
    (function) VALID_NUM


(8a) /scripts/examples/ -- subfolder containing generally well-commented example procedures
    berk_cinema1.pro
	- demonstrates how to work with FSW/GSEOS derived STEIN data, as well as how to post-process 
	  raw 16-bit STEIN data down to an equivalent data product
    khu_test1_overlaid.pro
	- overplotting of two different spectra, both post-processed from 16-bit > 7-bit resolution

(8b) /scripts/dusty/ -- subfolder containing poorly-commented and ugly procedures (possibly useful?)
    detxx_plot.pro
	DETXX_PLOT: to examine individual pixel performance for a given detector [specify detector]
    stein_compare-outputs.pro
        EX_PLOT_RAW: if we want to plot raw STEIN data (with/without simulated FSW intervention).
        EX_PLOT_FSW: if we want to plot FSW-derived STEIN data (from FSW).
        PLOTS_FOR_TESTING: derived from EX_PLOT_FSW.
    stein_rawadc.pro
        ADC_OUTPUT: examine STEIN's raw output from calibration sources


